#[macro_use]
extern crate log;
extern crate pretty_env_logger;
use human_panic::setup_panic;
use std::path::PathBuf;

mod actix_ructe;
mod db;
mod server;
mod short_code;

// This includes the template code generated by ructe
include!(concat!(env!("OUT_DIR"), "/templates.rs"));

fn main() {
    pretty_env_logger::init();
    setup_panic!();

    let arg = std::env::args()
        .nth(1)
        .unwrap_or_else(|| String::from("./k0r.db"));

    // we don't support switches, so we treat them all like --help
    if arg.starts_with('-') {
        println!("k0r [/path/to/k0r.db]\tDatabase name defaults to ./k0r.db");
        std::process::exit(exitcode::USAGE);
    } else {
        let mut path = PathBuf::from(&arg);

        // append k0r.db as filename if path is a directory
        if path.is_dir() {
            path.push("k0r.db");
            debug!("Expanded given argument \"{}\" to {:?}", &arg, path);
        }

        if !path.is_file() {
            error!("DB path not found and cannot be created: {:?}", path);
            std::process::exit(exitcode::CANTCREAT);
        }

        debug!("Starting server...");
        let _ = server::start(path);
    }
}
